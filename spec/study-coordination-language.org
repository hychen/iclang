#+TITLE: Study Of Coordination Language And Models
#+AUTHOR:Hsin-Yi Chen (hychen)
#+OPTIONS: H:2 num:t toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: <:nil todo:nil *:t ^:{} @:t ::t |:t TeX:t

* Patterns
- [[http://workflowpatterns.com][Workflow Patterns]]
- [[http://communicationtheory.org/patterns-of-communication/][Communication Patters]]
- Dsitrubuted Computing Software Architecture Pattern
  - [[http://www.cs.wustl.edu/~schmidt/POSA/POSA4/][Pattern-Oriented Software Architecture: A Pattern Language for Distributed Computing]]
- Enterprise Intergration Patterns
  - [[http://www.enterpriseintegrationpatterns.com/toc.html][Messaging Patterns]]
* Coordination Language And Models
** Papers
*** Coordination models and languages, GA Papadopoulos, F Arbab, 1999
**** The concept of coordination is by no means limited to Computer Science.
Malone and Crowston characterise coordination as an emerging research area with an interdisciplinary focus,
playing a key issue in many diverse disciplines such as economics and operational  research,  organisation theory  and  biology.
**** What is Coordination Model
- the glue that binds separate activities into an ensemble.
- The need of Multilingual and Heterogeneous Systems
****  Coordination works well  on distributed/parallel programming.
Programming a distributed or parallel system can be seen as the combination of two distinct activities: the actual
computing part comprising a number of processes involved in manipulating data and a coordination part responsible for
the communication and cooperation between the processes. Thus, coordination can be used to distinguish the computational
concerns of some distributed or parallel application from the communication ones, allowing the separate development but also
the eventual amalgamation of the these two major development phases.
**** Data-Driven
- The main characteristic of the data-driven coordination models and languages is the fact that the state of the computation at any moment
  in time is defined in terms of both the values of the data being received or sent and the actual configuration of the coordinated components.
- A data-driven coordination language typically offers some coordination primitives (coupled with a coordination metaphor) which are mixed within
  the purely computational part of  the  code.  These  primitives  do  encapsulate  in  a  useful  way  the  communication  and configurational
  aspects of some computation, but must be used in conjunction with the purely computational manipulation of data associated with some process.
  This means that processes cannot easily be distinguished as either coordination or computational processes.
***** Data-Driven Model - Shared Data Space
- Almost all coordination models belonging to this category have evolved around the notion of a *Shared Dataspace*.
- A *Shared  Dataspace* is a common, content-addressable  data structure. All processes involved in some computation can communicate among themselves only indirectly via this medium.
  this metaphor achieves decoupling of processes in both space and time.
***** Data-Driven Model - Message-passing

***** Data-Driven Model - Compositional Programming
- A compositional programming system is one in which properties of program
  components are preserved when those components are composed in parallel
  with other program components.
  Thus, it is possible to define in a compositional way recurring patterns
  of parallel computation, whether configuration ones (such as mapping techniques)
  or communication ones (such as streamers  and  mergers),  as  building  blocks
  and  combine  them  together  to  form  bigger programs.
- 2 approachs
  - *concurrent logic programming*
  - *functional programming*
**** Control-Driven
- the coordinated framework evolves by means of observing state changes in processes
  and, possibly, broadcast of events. Contrary to the case of the data-driven family
  where coordinators directly handle and examine data values, here processes
  (whether coordination or computational ones) are treated as black boxes; data handled
  within a  process is of no concern to the environment of the process.
- Processes communicate with their environment by means of clearly defined interfaces,
  usually referred to as input or output ports. Producer-consumer relationships are formed
  by means of setting up stream or channel connections between output ports of producers
  and input ports of consumers. By nature, these connections are point-to-point, although
  limited  broadcasting functionality  is  usually  allowed  by  forming  1-n
  relationships  between  a  producer  and  n consumers and vice versa.
- Most of the coordination languages to be described in this section realise in one way or
  another the above *CSP*- or *Occam-like* formalism.
- *static reconfiguration* v.s. *dynamic reconfiguration*
- [[http://projects.cwi.nl/manifold/][MANIFOLD]]
**** Comparision Between Data-Driven and Control-Driven
- In the case of the data-driven category, the coordination component is usually a set of primitives with predefined functionality which is used in connection with
  some “host” computational language, in the control-driven category the coordination component is usually a fully-fledged language.
- The data-driven category tends to be used mostly for parallelising computational problems. The control-driven category tends to be used primarily for modelling systems.
- the data- vs. control-driven separation is by no means a clear cut one.
**** Major Dimensions Of Coordination Model
- the entities being coordinated
- the mechanism of coordination
- the coordination medium or architecture
- the semantics, rules of protocols of coordination employed
- whether a model supports a different (from the computational component) coordination language or involves the use of “add-on” primitives
- whether a model supports and encourages the use of many computational languages
- what is the most relevant application domain for each  model
- what is the implementation status of the proposed framework.
**** Concerned Issues
- flat unstructured communication medium v.s. hierarchical levels of their communication medium
- port-to-port connections via streams with static/dymaic reconfiguration support.
- channnled-based v.s. medium-based


* Web Services Compositions
** Papers
*** van der Aalst, W.M.P, Dumas, M. ; ter Hofstede, A.H.M..  (2003). Web Service Composition Languages: Old Wine in New Bottles?. IEEE.
***  Luca Cardelli and Rowan Davies. . (1997). Service Combinators for Web Computing. IEEE.

* Data Flow
** Books
*** Morrison, J. P. (1994). Flow-based programming. Van Nostrand Reinhold.
*** Van-Roy, P., & Haridi, S. (2004). Concepts, techniques, and models of computer programming. MIT press.
*** Matt Carkci. (2014). Dataflow and Reactive Programming Systems. Leanpub.
** Papers
***  Kelly, J. L., Lochbaum, C., & Vyssotsky, V. A. (1961). A block diagram compiler. Bell System Technical Journal, 40(3), 669-676.
*** Sutherland, W. R. (1966). ON-LINE GRAPHICAL SPECIFICATION OF COMPUTER PROCEDURES (No. TR-405). LINCOLN LAB MASS INST OF TECH LEXINGTON.
*** Rodrigues, J. E., & Rodriguez Bezos, J. E. (1969). A Graph Model for Parallel Computations.
*** Dennis, J. B. (1972). On the design and specification of a common base language (No. MAC-TR-101). MASSACHUSETTS INST OF TECH CAMBRIDGE PROJECT MAC.
*** Dennis, J. B. (1974, January). First version of a data flow procedure language. In Programming Symposium (pp. 362-376). Springer Berlin Heidelberg.
*** Gilles, K. A. H. N. (1974). The semantics of a simple language for parallel programming. In In Information Processing’74: Proceedings of the IFIP Congress (Vol. 74, pp. 471-475).
*** Karp, R. M., & Miller, R. E. (1966). Properties of a model for parallel computations: Determinacy, termination, queueing. SIAM Journal on Applied Mathematics, 14(6), 1390-1411.
*** Karp, R. M., & Miller, R. E. (1966). Properties of a model for parallel computations: Determinacy, termination, queueing. SIAM Journal on Applied Mathematics, 14(6), 1390-1411.
*** Nikhil, R. S. (1989, April). Can dataflow subsume von Neumann computing?. In ACM SIGARCH Computer Architecture News (Vol. 17, No. 3, pp. 262-272). ACM.
*** Karp, R. M., & Miller, R. E. (1966). Properties of a model for parallel computations: Determinacy, termination, queueing. SIAM Journal on Applied Mathematics, 14(6), 1390-1411.
*** Berry, G. (1989). Real time programming: Special purpose or general purpose languages.
*** Lee, E. (1991). Consistency in dataflow graphs. Parallel and Distributed Systems, IEEE Transactions on, 2(2), 223-235.
*** Buck, J., & Lee, E. A. (1992, May). The token flow model. In Data Flow Workshop.
*** Hils, D. D. (1992). Visual languages and computing survey: Data flow visual programming languages. Journal of Visual Languages & Computing, 3(1), 69-101.
*** Hurson, A. R., Hurson, A. R., Lee, B., & Lee, B. (1993). Issues in dataflow computing. Adv. in Comput, 37(285-333), 38-39.
*** Buck, J. T., & Lee, E. A. (1993, April). Scheduling dynamic dataflow graphs with bounded memory using the token flow model. In Acoustics, Speech, and Signal Processing, 1993. ICASSP-93., 1993 IEEE International Conference on (Vol. 1, pp. 429-432). IEEE.
*** Bhattacharyya, S. S., & Lee, E. A. (1994). Looped schedules for dataflow descriptions of multirate signal processing algorithms. Formal Methods in System Design, 5(3), 183-205.
*** Bhattacharyya, S. S., Buck, J. T., Ha, S., & Lee, E. A. (1995). Generating compact code from dataflow specifications of multirate signal processing algorithms. Circuits and Systems I: Fundamental Theory and Applications, IEEE Transactions on, 42(3), 138-150.
*** Parks, T. M. (1995). Bounded scheduling of process networks (Doctoral dissertation, University of California). Chicago
*** Parks, T. M., Pino, J. L., & Lee, E. A. (1995, October). A comparison of synchronous and cycle-static dataflow. In Signals, Systems and Computers, 1995. 1995 Conference Record of the Twenty-Ninth Asilomar Conference on (Vol. 1, pp. 204-210). IEEE.
*** Lee, E. A., & Parks, T. M. (1995). Dataflow process networks. Proceedings of the IEEE, 83(5), 773-801.
*** Verdoscia, L. O. R. E. N. Z. O. (1996). ALFA fine grain dataflow machine. International Programming, ma orgun and ea ashcroft edition.
*** Lee, E. A. (1997). A denotational semantics for dataflow with firing. Electronics Research Laboratory, College of Engineering, University of California.
*** Robic, B., Silc, J., & Ungerer, T. (2000). Beyond dataflow. Journal of Computing and Information Technology, 8(2), 89-102.
*** Lee, B. (2000). Specification and design of reactive systems (Doctoral dissertation, UNIVERSITY of CALIFORNIA).
*** Liu, J., & Lee, E. A. (2002). A component-based approach to modeling and simulating mixed-signal and hybrid systems. ACM Transactions on Modeling and Computer Simulation (TOMACS), 12(4), 343-368.
*** Johnston, W. M., Hanna, J. R., & Millar, R. J. (2004). Advances in dataflow programming languages. ACM Computing Surveys (CSUR), 36(1), 1-34.
*** Petersen, A., Putnam, A., Mercaldi, M., Schwerin, A., Eggers, S., Swanson, S., & Oskin, M. (2006, September). Reducing control overhead in dataflow architectures. In 「Proceedings of the 15th international conference on Parallel architectures and compilation techniques (pp. 182-191). ACM.
*** Lee, E. A. (2009). Computing needs time. Communications of the ACM, 52(5), 70-79.
*** Arandi, S., & Evripidou, P. (2010, July). Programming multi-core architectures using data-flow techniques. In Embedded Computer Systems (SAMOS), 2010 International Conference on (pp. 152-161). IEEE.
*** Lee, E. A., & Varaiya, P. (2011). Structure and interpretation of signals and systems, Second Edition, LeeVaraiya.org.
*** Amsden, E. (2011). A survey of functional reactive programming. Unpublished.
*** Sousa, T. B. (2012). Dataflow Programming Concept, Languages and Applications. In Doctoral Symposium on Informatics Engineering.
*** Odersky, M., & Maier, I. (2012). Deprecating the Observer Pattern with Scala. React (No. EPFL-REPORT-176887).
*** Mishra, V., & Oney, K. Predictive Block Dataflow Model for Parallel Computation.
*** Chakilam, S. R. A. K. C., & O’Neil, T. W. STATIC SCHEDULING FOR CYCLO STATIC DATA FLOW GRAPHS.

