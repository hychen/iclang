#+TITLE: Internet Combinator Language Specification
#+AUTHOR: Hsin-Yi Chen (hychen)
#+OPTIONS: H:2 num:t toc:2
#+OPTIONS: ^:nil
#+OPTIONS: <:nil todo:nil *:t ^:{} @:t ::t |:t TeX:t
  
* Conventions and Terminology

The key words *MUST*, *MUST NOT*, *REQUIRED*, *SHALL*, *SHALL NOT*, *SHOULD*, *SHOULD NOT*, *RECOMMENDED*, *MAY*, 
and *OPTIONAL* in this document are to be interpreted as described in [[https://www.ietf.org/rfc/rfc2119.txt][RFC 2119]].

* Introduction

The things of internet is a highly interconnected collection of computational resources, and 
as such it can be considred as forming a big computer. It is obviously to have some kind 
of abstract programming language runs on this wired computer.

Internet Combinator Language, ICLang in short, is a cordination language for compositing things on internet.
and designed in dataflow mindset with [[en.wikipedia.org/wiki/Configurable_modularity][configurable modularity]]. 

Not like how we does when we building a application in conventional programming language, building a pplication 
in ICLang is totally different, and almost like like building a electronic circuit by wiring pins of integrated 
circuits.

Which means a developer defines applications as networks of "black box" processes, which exchange data across 
predefined connections by message passing, where the connections are specified externally to the processes. 

These black box processes can be reconnected endlessly to form different applications without having to be changed
internally. So, when a developer programs, he is doing visual thinking in his mind.

#+BEGIN_SRC ditaa
   +-----------------------------------------------+
   |      +-------------+     +--------------+     |
   |      |             |     |              |     |
str|[]--->[]in Read out[]---->[]in Print out[]--->[]status
   |      |             |     |              |     |
   |      +-------------+     +--------------+     |
   +-----------------------------------------------+      
#+END_SRC

This programming paradigm that uses a "data factory" metaphor for designing and building applications 
usually called [[https://en.wikipedia.org/wiki/Dataflow_programming][Data Flow Programming]], [[http://www.jpaulmorrison.com/fbp/][Flow-based Programming]].

This document defines the syntax for IClang programs and an informal abstract semantics for the meaning of such 
programs. We leave as implementation dependent the ways in which ICLang programs are to be manipulated, interpreted,
etc. 

The implementations should follow principle below:

- All components should be independent and stateless.
- All components should be able written in any conventional programming language.
- All connections between component ports should be parallelism.

** Program Structure

In this section, we describe the abstract syntactic and semantic structure of ICLang.

1. At the topmost level is IClang's lexcial structure. The lexical structure represents ICLang programs in 
   JSON files.
2. At the top level is modules described in Chapter [[Modules][Modules]]. Modules provide a way to control namespaces.
3. At the bottom level is a collection of components described in Chapter [[Components]].

* Lexical Structure

In this chapter, we describe the low-level lexical structure of ICLang.

** Lexical Program Structure

#+BEGIN_SRC javascript :tangle ../schema/hyperscript-schema.json
  {
      "$schema": "http://json-schema.org/schema#",
      "title": "ICLang Program",
      "type": "object",
      "required":["properties", "processes", "connections"],
      "properties": {
          "comment": {"$ref":"#/definitions/comment"},
          "properties": {"$ref":"#/definitions/properties"},
          "processes": {"$ref":"#/definitions/processes"},
          "connections": {"$ref":"#/definitions/connections"},
          "inports": {"$ref":"#/definitions/inports"},
          "exports": {"$ref":"#/definitions/exports"}
      },
      "definitions":{        
          "properties":{
              "title": "IClang Program Properties",
              "type":"object",
              "properties":{
                  "name":{
                      "title": "IClang Program Name",                    
                      "type":"string",
                      "required": true
                  },
                  "description":{
                      "title": "IClang Program Description",
                      "type":"string",
                      "required": true
                  }
              }
          },
          "processes":{
              "title": "Running Processes",
              "type":"object",
              "addtionalProperties":false,
              "patternProperties":{
                  "^[a-zA-Z]([a-zA-Z0-9]*?)":{
                      "type":"object",
                      "required":["component", "option"],
                      "properties":{
                          "component":{
                              "title": "Component",
                              "type":"string"
                          },
                          "option":{
                              "title": "Component Option",
                              "type":"object"
                          }
                      }
                  }
              }
          },
          "process_port":{
              "title": "Process Port",
              "type":"object",
              "required":["process", "port"],
              "properties":{
                  "process":{
                      "title": "Process Name",
                      "type":"string"
                  },
                  "port":{
                      "title": "Port Name",
                      "type":"string"
                  }
              }
          },
          "connections":{
              "title": "Connections",
              "type":"array",
              "items":{
                  "type":"object",
                  "required": ["src", "dest"],
                  "properties":{
                      "src":{"$ref":"#/definitions/process_port"},
                      "dest":{"$ref":"#/definitions/process_port"}
                  }
              }
          },
          "inports":{
              "title": "Program InPorts",
              "type":"array",
              "items":{
                  "type":"object",
                  "required":["name","dest"],
                  "properties":{
                      "name":{
                          "title": "InPort Name",
                          "type":"string"
                      },
                      "dest":{
                          "$ref":"#/definitions/process_port"
                      }
                  }
              }
          },
          "exports":{
              "title": "Program ExPorts",
              "type":"array",
              "items":{
                  "required":["name", "src"],
                  "type":"object",
                  "properties":{
                      "name":{
                          "title": "ExPort Name",
                          "type":"string"
                      },
                      "src":{
                          "$ref":"#/definitions/process_port"
                      }
                  }
              }
          },
          "comment":{
              "title": "Program Comment",
              "type":"string"
          }        
      }
  }
#+END_SRC

As an example below, shows a IClang program.

#+BEGIN_SRC javascript :tangle ../example/simple-hyperscript.json
  {
      "properties":{
          "name":"read a string and print",
          "description": "read a string then print it to console."
      },
      "processes":{
          "Read":{
              "component":"ReadComponentId"
          },
          "Print":{
              "component":"PrintComponentId"
          }
      },
      "connections":[
          {
              "src":{
                  "process":"Read",
                  "port":"out"                
              },
              "dest":{
                  "process":"Print",
                  "port":"in"
              }
          }
      ],
      "inports":[
          {
              "name":"str",          
              "dest":{
                  "process":"Read",
                  "port":"in"
              }
          }
      ],
      "exports":[
          {
              "name":"status",
              "src":{
                  "process":"Print",
                  "port":"out"
              }
          }    
      ]
  }
#+END_SRC

*** Property: properties
TBD
*** Property: processes
TBD
*** Property: connections
TBD
*** Property: inports
TBD
*** Property: exports
TBD
*** Property: comments
    TBD
* Components

A component is a module of a conventional programming language, exports [[Component%20Definition][Component Definition]], a value declares component
metadata, such as name, description,etc. And [[Component%20Provider][Component Provider]] a function to provide the value. the name of the value 
and function should be corresponding to ones used in the ICLang runtime implemented in same conventional programming 
language.

In this chapter, we are using Node.JS implmentation of a component to explain the syntax and abstract meaning.

** Component Strucutre

Hre is the structure for Node.JS and components implemented in other conventional programming language 
should very simliary to this one.

#+BEGIN_SRC javascript
  module.exports.definition = {
      friendlyName: 'Do something',
      description: 'Do something with the provided inputs that results in one of the exit scenarios.',
      inputs: {
          apiKey: {
              description: 'The api key to be used.',
              example: 'foo',
          }
      },
      outputs:{
          out:{
              description: ''
              example: 'foo'
          }  
      },
    defaultExit: 'success',
      exits: {
          success: {
              example: 'myApiKey',
              description: 'Returns the API key for your totally fake account'
          },
          error: {
              description: 'Unexpected error occurred.'
          }
      },
      fn: function(inputs, exits) {
          // ...
          // your code here
      var result = 'foo';
          // ...
          // ...and when you're done:
          return exits.success(result);
      };
  }

  module.exports.provideComponent = function (options){
      return definition;
  }
#+END_SRC

As above shows, the Component Definition called *definition* and the Component Provider called *provideComponent*.

** Component Definition

Component Definition is a JSON that 

- is [[http://node-machine.org/spec/machine][Node Machine Specification]] compatible.
- can be verified by the following schema:

#+BEGIN_SRC javascript :tangle ../schema/component-schema.json
  {
      "$schema": "http://json-schema.org/schema#",
      "title": "ICLang Component Definition JSON Schema",
      "type": "object",
      "required": ["friendlyName", "fn"],
      "properties": {
          "friendlyName":{
              "type": "string"
          },
          "description":{
              "type": "string"
          },
          "inputs": {
              "type": "object"
          },
          "outputs":{
              "type": "object"
          },
          "defaultExists": {
              "type": "string"
          },
          "extis": {
              "type": "object"
          },
          "addtionalProperties":false,
          "patternProperties":{
              "^[a-zA-Z]([a-zA-Z0-9]*?)":{
                      "type":"object",
                      "required":["description"],
                      "properties":{
                          "description":{"type":"string"}
                      }
                  }
          },
          "fn": {}
      }
  }
#+END_SRC

*** Property: friendlyName
TBD
*** Property: description
*** Property: inputs
TBD
*** Property: outputs
TBD
*** Property: defaultExits
TBD
*** Property: exits
TBD
*** Property: fn

Component Function is a function recives two fixed arguments, inputs and exists

- inputs :: data recived on the ports of the component it belongs to after firing.

#+BEGIN_SRC javascript
  {
      "apiKey": 'foo'
  }
#+END_SRC

- outputs :: [[Tagged Data Token][Tagged Data Token]] will be routed.

#+BEGIN_SRC javascript
  {
      "out": "foo"
  }
#+END_SRC

- exits :: callbacks.

#+BEGIN_SRC javascript
  {
      "success": function(results) {// dispath results to destination ports.}
      "error": function(error){console.error(error);}
  }
#+END_SRC

** Component Provider

Component Provider is a function receives an fixed argument that the type is a object and returns [[Component%20Definition][Component Definition]].

* Composed Components

A composed component is a IClang program has well-defined inports or exports, which means other components could
connect and receive or send data.

By this desgin, a IClang program should be able to used in another program as a component.

#+BEGIN_SRC ditaa
   +-----------------------------------------------+
   |      +-------------+     +--------------+     |           +--------------+
   |      |             |     |              |     |------+    |              |
str|[]--->[]in Read out[]---->[]in Count out[]--->[]status|--->[]in Print out[]
   |      |             |     |              |     |------+    |              |
   |      +-------------+     +--------------+     |           +--------------+
   +-----------------------------------------------+
                  ReadAndCount
#+END_SRC

* Tagged Token
** Input Data Token

It is just a json object that the keys are the source ports name.

#+BEGIN_SRC javascript
  {
      "inport1": "value1",
      "inport2": "value2"
  }
#+END_SRC

** Output Data Token

It is just a json object that the keys are the desitination ports name.
Each value will be route to proper ports after firing.

#+BEGIN_SRC javascript
  {
      "outport1": "value1",
      "outport2": "value2"
  }
#+END_SRC

* Modules

Modules are namespaces which contain multiple modules and components themselves and maintianed
by conventional programming language package menagement tool. 

Node.Js implementations of modules are maintained by [[https://www.npmjs.com][NPM]] and uses the prefix *ic-module-*.

In this chapter, we use Node.Js implmentation to explain the directory structure and its meaning.

** Directory structure

The *metadata.json* files are required to make ICLang treat the directories as containing modules;
Here is a typical directory structure for a IClang module.

#+BEGIN_SRC 
- metadata.json
- package.json
- scripts/
  |- script_a.json
- components/
  |- component_a.js
  \- component_b.js
#+END_SRC

*** metadata.json

The *metadata.json* file must contain entries to show what components the module provides,
along with a pointer to their files.

It should be able to verified by the schema below.

#+BEGIN_SRC javascript
    {
        "$schema": "http://json-schema.org/schema#",
        "title": "ICLang Module",
        "type": "object",
        "required":["scripts", "components"],
        "properties": {
            "scripts": {
                "type": "array",
                "items":{
                    "type": "string"
                }
            },
            "components": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    }
#+END_SRC

As example below, its shows this module contains two components, *component_a* and *component_b* in 
*components* directory.

#+BEGIN_SRC javascript
  {
      "scripts": [
          "scripts/script_a.json"
      ],    
      "components": [
          "components/component_a.js",
          "components/component_b.js"
      ]
  }
#+END_SRC

*** package.json

If any of the components have dependencies on other npm modules, they must be included in the dependencies property.

To help make the components discoverable within the npm repository, the file should include iclang in its keywords 
property. This will ensure the package appears when searching by keyword.

#+BEGIN_SRC javascript
  {
      "name": "ic-module-samplemodule",
      "version": "0.0.1",
      "description": "A sample module",
      "keywords": ["iclang"],
  }
#+END_SRC


** More complex structure

#+BEGIN_SRC
- module_root/
  |- metadata.json
  |- package.json
  |- module_a/
  |  |- metadata.json
  |  |- components/
  |     |- component_a.js
  |     \- component_b.js
  |- module_b/
     |- metadata.json
     |- module_b_c/
        |- metdata.json
        |- components/
        |  |- component_b_c_a.js
        \- scripts/

#+END_SRC

#+BEGIN_SRC javascript
  {
      "import":[
          "module_root"
      ],
      "processes": {
          "Read":{
              "component": "module_root.module_a.component_a"
          },
          "Write":{
              "component": "module_root.module_b.module_b_c.component_b_c_a"
          }
      }
  }
#+END_SRC

* Evaluation

A IClang program is evaluated by ICLang interpreter. It instances procesess, connects ports betwen processes in order 
to indicate where data comes, how data be processed and where processed result goes.
*** Defintions
**** Processes
A process is an instance of a component.

- All process should have a UUID identifier.
- All process should be able to have zero to infinite InSocket or zero to infinite OutSocket.
- All process should starts firing if and only if the Firing Rules is satisfied.
  
**** Sockets
A socket is an instance of a port which is place on a process to receiving or sending data.

- All sockets should have a UUID identifier.
- All socekts should be directional, the direction is either IN or Out, called InSocket or OutSocket.

**** Connections
A logical link between a InPort and a OutPort  which allows one process is able to send data to another process.

- Each socket should not be connect to another socket of a process it belongs to.
- Sockets has same direction should be able to connect each other.

** Binding variables
TBD
** Instancing components
TBD
** Connecting processes
TBD
** Firing 
The process run the component function if firing rule is satisfied.

*** Fire Rule
**** No data arrived, the process does not fire.

#+BEGIN_SRC
      +------------+
X --->[]in1        |
      |     Print  |
X --->[]in2        |
      +------------+
#+END_SRC

**** Only one data arrived to *in1*, port, the process does not fire.

#+BEGIN_SRC
     +------------+
--->[X]in1        |
     |     Print  |
-X->[]in2         |
     +------------+
#+END_SRC

**** All data arrived to *in1* and *in2* port, the process fires.

#+BEGIN_SRC
     +------------+
--->[X]in1        |
     |     Print  |
--->[X]in2        |
     +------------+
#+END_SRC
