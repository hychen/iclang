#+TITLE: Internet Combinator Language
#+AUTHOR:Hsin-Yi Chen (hychen)
#+OPTIONS: H:2 num:t toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: <:nil todo:nil *:t ^:{} @:t ::t |:t TeX:t

/WARNING: This is work in progress. The APIs will remain in flux until 1.0.0. Suggestions welcome!/

Internet Combinator Language, iclang in short, is a cordination language 
which has configurable modularity for compositing things of internet.

#+BEGIN_SRC ditaa
   +-----------------------------------------------+
   |      +-------------+     +--------------+     |
   |      |             |     |              |     |
str|[]--->[]in Read out[]---->[]in Print out[]--->[]status
   |      |             |     |              |     |
   |      +-------------+     +--------------+     |
   +-----------------------------------------------+      
#+END_SRC

*  Design Principle

Writing a application in IClang is simple like building a electronic circuit by 
wiring pins of integrated circuits.

- All components in IClang should be independent and stateless.
- All connections between component ports should be parallelism.
- All components are language-free and developers can write in their favor conventional 
  programming language, such as JavaScript, Python, etc.

for more details, please check the [[file:spec/spec-iclang.org][specification]] (in Chinese) in *spec* directory.

* Get started

** Install
The Node.JS implementation of IClang requires [[https://github.com/imatix/zguide][Ã˜MQ]] for send/receive data between components.

#+BEGIN_SRC shell
$ brew install zmq
#+END_SRC

and then get recent version of Node.js and the IClang source code via Github.

#+BEGIN_SRC shell
$ git clone https://github.com/hychen/iclang.git
#+END_SRC 

then simply type

#+BEGIN_SRC shell
$ npm i 
#+END_SRC

now, you can run test.

#+BEGIN_SRC shell
$ npm run test
#+END_SRC
